import axios from 'axios';
import React, { Fragment, useState } from 'react'
import { Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap'
import loading from '../../../assets/utils/images/loading.gif'
const endpoint = process.env.VULNVIEW_API_ENDPOINT

export default function Vulnerability(props) {
    const [vulnerability, setVulnerability] = useState(props);
    const [showModal, setShowModal] = useState(false);
    const [cveData, setCveData] = useState(<img src={loading} style={{ alignSelf: 'center' }} />)
    const [calledApi, setCalledApi] = useState(false);

    const [downloadContent, setDownloadContent] = useState("data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(props)));
    const toggler = () => {
        setShowModal(sm => !sm);
        if (!calledApi) {
            setCalledApi(true)
            getCveData()
        }
    }

    const getCveData = () => {
        console.log("res");
        axios(`${endpoint}/API/CVEs/${vulnerability.year}/${vulnerability.id}`)
            .then(res => {
                let seen = []
                setCveData(<Fragment>
                    {res.data.cveCweJunctions.length > 0 &&
                        <div>
                            <h4>Weakness</h4>
                            <p>{res.data.cveCweJunctions[0].cwe.name} <strong>(<a href={`https://cwe.mitre.org/data/definitions/${res.data.cveCweJunctions[0].cwe.id}.html`}>CWE-{res.data.cveCweJunctions[0].cwe.id}</a>)</strong>
                            </p>
                        </div>
                    }
                    {res.data.references.length > 0 &&
                        <div>
                            <h4>References</h4>
                            <ul>
                                {res.data.references.map((ref, key) => <a href={ref.url}><li key={key}>{ref.url}</li></a>)}
                            </ul>
                        </div>
                    }
                    {res.data.cveCpeJunctions.length > 0 &&
                        <div>
                            <h4>Affected Platform</h4>
                            <ul>
                                {res.data.cveCpeJunctions.map((cpeEntry, key) => {
                                    if (seen.includes(cpeEntry.cpe.vendor + cpeEntry.cpe.product)) return <span key={key}></span>
                                    seen.push(cpeEntry.cpe.vendor + cpeEntry.cpe.product)
                                    return (<li key={key}>{
                                        cpeEntry.cpe.product.replaceAll('_', ' ').trim()[0].toUpperCase() + cpeEntry.cpe.product.replaceAll('_', ' ').trim().substring(1)
                                    } <span className="text-muted">(By {
                                        cpeEntry.cpe.vendor.replaceAll('_', ' ').trim()[0].toUpperCase() + cpeEntry.cpe.vendor.replaceAll('_', ' ').trim().substring(1)
                                    })</span></li>);
                                }
                                )}
                            </ul>
                        </div>
                    }
                </Fragment>)
                setDownloadContent("data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(res.data)))
            })
    }

    return (<Fragment>
        <tr>
            <td>{vulnerability.counter}</td>
            <td>CVE-{vulnerability.year}-{vulnerability.id}</td>
            <td>{vulnerability.createdAt.split("T")[0]}</td>
            <td>{vulnerability.updatedAt.split("T")[0]}</td>
            <td>{vulnerability.cvsSv2Impact == 255 ? "N/A" : vulnerability.cvsSv2Impact / 10}</td>
            <td>{vulnerability.cvsSv3Impact == 255 ? "N/A" : vulnerability.cvsSv3Impact / 10}</td>
            <td>{vulnerability.cnaNavigation.name.trim()}</td>
            <td>
                <Button color="primary mx-1" onClick={toggler}>
                    <i className="fas fa-info-circle" /> More
                </Button>
                <Modal isOpen={showModal} toggle={toggler} className={props.className}>
                    <ModalHeader toggle={toggler}>CVE-{vulnerability.year}-{vulnerability.id}</ModalHeader>
                    <ModalBody>
                        <p>
                            <span className="text-secondary">Created On: {vulnerability.createdAt.split("T")[0]}</span><br />
                            <span className="text-secondary">Updated On: {vulnerability.updatedAt.split("T")[0]}</span>
                        </p>
                        <h4>Description</h4>
                        <p>{vulnerability.description}</p>
                        <h4>Severity</h4>
                        <p>CVSS v2 Severity Score: <span>{vulnerability.cvsSv2Impact == 255 ? "N/A" : vulnerability.cvsSv2Impact / 10}</span></p>
                        <p>CVSS v3 Severity Score: <span>{vulnerability.cvsSv3Impact == 255 ? "N/A" : vulnerability.cvsSv3Impact / 10}</span></p>
                        {cveData}
                    </ModalBody>
                    <ModalFooter>
                        {/* <Button className="mr-auto" color="danger" onClick={toggler}><i className="fas fa-trash-alt" /> Delete</Button> */}
                        <Button color="primary" className="mr-auto" onClick={toggler}><i className="far fa-window-close-alt" /> Close</Button>{' '}
                        <a href={downloadContent} download={`CVE-${vulnerability.year}-${vulnerability.id}.json`}><Button color="success" onClick={toggler}><i className="fas fa-download" /> Download</Button>{' '}</a>
                    </ModalFooter>
                </Modal>
            </td>
        </tr>
    </Fragment >)
}
